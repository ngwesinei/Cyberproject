/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.io.BufferedWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Ei
 */
public class NewJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
//    String host = "";
//    int port = 25000;
//    InetAddress address=null;
    private static Socket socket;

    public NewJPanel() {
        try {

            initComponents();

        } catch (Exception ex) {
            Logger.getLogger(NewJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        btn_Button = new javax.swing.JButton();
        txt_IPAddress = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_sendMessage = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(675, 328));

        btn_Button.setBackground(new java.awt.Color(0, 51, 51));
        btn_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btn_Button.setForeground(new java.awt.Color(255, 255, 255));
        btn_Button.setText("Send");
        btn_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ButtonActionPerformed(evt);
            }
        });

        txt_IPAddress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_IPAddress.setText("192.168.0.17");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Server IP ");

        jScrollPane3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txt_sendMessage.setColumns(20);
        txt_sendMessage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_sendMessage.setRows(5);
        jScrollPane3.setViewportView(txt_sendMessage);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Message Send");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(130, 130, 130))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txt_IPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addComponent(btn_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ButtonActionPerformed
        // TODO add your handling code here:
        sendMessageToServerByEncryptorFinal();
    }//GEN-LAST:event_btn_ButtonActionPerformed

    public void sendMessageToServerByEncryptor() {
        try {

            System.out.println(txt_sendMessage.getText());
            String str_message = txt_sendMessage.getText();

            if (!str_message.equals("")) {

                String str_key = JOptionPane.showInputDialog(this, "Enter Key: ");
                if (str_key.equals("")) {

                } else {

                    String str_cipherText = Encryptor.encrypt(str_key, "eingwesin0000000", str_message);
                    String sendMessage = str_cipherText;
                    System.out.println(sendMessage);

                    OutputStream os = socket.getOutputStream();
                    OutputStreamWriter osw = new OutputStreamWriter(os);
                    BufferedWriter bw = new BufferedWriter(osw);

                    bw.write(sendMessage);
                    bw.flush();
                    
                    bw.close();
                    osw.close();
                    os.close();
                    System.out.println("this is end of buffer writer");
//                    InputStream is = socket.getInputStream();
//                     InputStreamReader isr = new InputStreamReader(is);
//                     BufferedReader br = new BufferedReader(isr);
//                    String message = br.readLine();
//                    System.out.println("Message received from the server : " +message);
                }

            }

        } catch (Exception ex) {
            ex.toString();
            LogToFile.log(ex, "severe", ex.toString());
        }

    }
    
    public void sendMessageToServerByEncryptorFinal() {
        try {

            System.out.println(txt_sendMessage.getText());
            String str_message = txt_sendMessage.getText();

            if (!str_message.equals("")) {

                String str_key = JOptionPane.showInputDialog(this, "Enter 16 Key: ");
                if (str_key.equals("")) {

                } else {
                    
                    if(str_key.length()==16){
                           String str_cipherText = Encryptor.encrypt(str_key, "eingwesin0000000", str_message);
                    String sendMessage = str_cipherText;
                    System.out.println(sendMessage);

                    int port = 25000;
                    String host = txt_IPAddress.getText();
                    InetAddress address = InetAddress.getByName(host);
                    if (socket== null || !socket.isConnected() || socket.isClosed()) {
                        socket = new Socket(address, port);
                    }
                    
                    OutputStream os = socket.getOutputStream();
                    OutputStreamWriter osw = new OutputStreamWriter(os);
                    BufferedWriter bw = new BufferedWriter(osw);

                    bw.write(sendMessage);
                    bw.flush();
                    
                    bw.close();
                    osw.close();
                    os.close();
                    System.out.println("this is end of buffer writer");
//                    InputStream is = socket.getInputStream();
//                     InputStreamReader isr = new InputStreamReader(is);
//                     BufferedReader br = new BufferedReader(isr);
//                    String message = br.readLine();
//                    System.out.println("Message received from the server : " +message);
                        
                    }else{
                        sendMessageToServerByEncryptorFinal();
                    }
                    
                 
                }

            }

        } catch (Exception ex) {
            ex.toString();
            LogToFile.log(ex, "severe", ex.toString());
        }

    }

   

    

  
        
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Button;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField txt_IPAddress;
    public static javax.swing.JTextArea txt_sendMessage;
    // End of variables declaration//GEN-END:variables
}
